
<div class="form-group">
    <label for="search">@Label</label>
    <input type="text"
           class="form-control"
    @bind-value="UserInput"
    @bind-value:event="oninput"
    @onkeyup="OnPressKeys" />
</div>

@if (searchResults != null && searchResults.Count > 0)
{
    <div class="search-result">
        <ul>
            @{

                int itemIndex = 0;

                foreach (var item in searchResults)
                {
                    <li class="@(itemIndex==currentItemIndex?"selected":"")"
                    @key="@item.Id"
                    @onclick="(() => OnSelectItem(item))">
                        @item.Name
                    </li>
                    itemIndex++;
                }
            }
        </ul>


    </div>
}


@code {
    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public Func<string, Task<List<ItemViewModel>>>? SearchFunction { get; set; }


    [Parameter]
    public EventCallback<ItemViewModel> OnItemSelected { get; set; }

    private ItemViewModel? selectedItem = null;

    private List<ItemViewModel>? searchResults = null;

    private ItemViewModel? currentItem = null;

    private int currentItemIndex = -1;

    private string _userInput = string.Empty;

    public string UserInput
    {
        get => _userInput;
        set
        {
            _userInput = value;

            if (!string.IsNullOrWhiteSpace(_userInput))
            {
                if (SearchFunction != null && this.selectedItem?.Name != _userInput)
                {
                    ViewItemsAsync();
                }
            }
            else
            {
                ClearCurrentItem();
            }
        }
    }


    private async Task ViewItemsAsync()
    {
        if (SearchFunction != null)
        {
            this.searchResults = await SearchFunction(_userInput);
            this.selectedItem = null;
        }
    }

    public void OnSelectItem(ItemViewModel? item)
    {
        ClearCurrentItem();

        this.selectedItem = item;
        
        if (selectedItem != null)
            this.UserInput = this.selectedItem.Name;

        OnItemSelected.InvokeAsync(this.selectedItem);
    }

    private void ClearCurrentItem()
    {
        searchResults = null;
        currentItem = null;
        currentItemIndex = -1;
    }

    private void OnPressKeys(KeyboardEventArgs e)
    {
        if ((e.Code == "ArrowDown" || e.Code == "ArrowUp") && searchResults != null && searchResults.Count > 0)
        {
            if (e.Code == "ArrowDown" && currentItemIndex < searchResults.Count - 1)
            {
                currentItemIndex++;
                currentItem = searchResults[currentItemIndex];
            }
            else if (e.Code == "ArrowUp")
            {
                if (currentItemIndex > 0)
                {
                    currentItemIndex--;
                    currentItem = searchResults[currentItemIndex];
                }
                else
                {
                    currentItem = null;
                    currentItemIndex = -1;
                }
            }
        }
        else if ((e.Code == "Enter" || e.Code == "NumpadEnter"))
        {
            if (currentItem != null)
                OnSelectItem(currentItem);
        }
        else if ((e.Code == "Delete" || e.Code == "Backspace"))
        {
            if (string.IsNullOrEmpty(_userInput))
            {
                ClearCurrentItem();
                OnSelectItem(null);
            }
        }

    }





}

   