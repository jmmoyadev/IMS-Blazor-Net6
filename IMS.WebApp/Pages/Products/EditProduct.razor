@page "/products/edit/{ProductId:int}"
@inject IViewProductByIdUseCase _viewProductByIdUseCase;
@inject IEditProductUseCase _editProductUseCase;
@inject NavigationManager _navigationManager;



<h3>Add Product</h3>

<br />

@if (this.product != null)
{

    <EditForm Model="product" OnValidSubmit="SaveProduct">

        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>


        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" class="form-control" @bind-Value="product.ProductName"></InputText>
        </div>

        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="quantity" class="form-control" @bind-Value="product.Quantity"></InputNumber>
        </div>

        <div class="form-group">
            <label for="price">Price</label>
            <InputNumber id="price" class="form-control" @bind-Value="product.Price"></InputNumber>
        </div>
        <div class="form-group">
            <label for="invs">Inventories</label>
            <ProductInventoriesComponent Product="this.product"></ProductInventoriesComponent>
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>

    </EditForm>
}
else
{
    <div> Product not found!</div>
}

@code {

    [Parameter]
    public int ProductId { get; set; }

    private Product product = new Product();

    protected override async Task OnParametersSetAsync()
    {
        product = await _viewProductByIdUseCase.ExecuteAsync(ProductId);
    }

    private async Task SaveProduct()
    {
        await _editProductUseCase.ExecuteAsync(product);
        _navigationManager.NavigateTo("/products");

    }

    private void Cancel()
    {
        _navigationManager.NavigateTo("/products");
    }

}
