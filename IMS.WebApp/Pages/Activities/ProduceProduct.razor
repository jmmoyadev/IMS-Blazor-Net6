@page "/produce"

@inject IViewProductByIdUseCase _viewProductByIdUseCase
@inject IViewProductsByNameUseCase _viewProductsByNameUseCase
@inject IProduceProductUseCase _produceProductUseCase
@inject IJSRuntime _jsRuntime

@attribute [Authorize(Policy="Productions")]



<h3>ProductProduct</h3>

<br />
<EditForm id="produceForm" Model="_produceViewModel" OnValidSubmit="Produce">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="form-group">
        <label for="po">Production #</label>
        <InputText id="po" @bind-Value="_produceViewModel.ProductionNumber" class="form-control"></InputText>
    </div>
    <br />
    <div class="card">
        <div class="card-body">

            <div class="form-group">
                <AutoCompleteComponent Label="Product to Produce"
                                       SearchFunction="SearchProduct"
                                       OnItemSelected="OnItemSelected">
                </AutoCompleteComponent>
                <input type="hidden" value="@_produceViewModel.ProductId" />
                @if (_produceViewModel.ProductId > 0 && _produceViewModel.ProductPrice >= 0)
                {
                    <span class="d-block m-0 pt-1">Price: @_produceViewModel.ProductPrice.ToString("c") </span>
                }
                else
                {
                    <span class="d-block m-0 pt-1">&nbsp;</span>
                }
            </div>
        </div>

    </div>
    <br />
    <div class="form-group">
        <label for="quantity">Quantity</label>
        <InputNumber id="quantity" @bind-Value="_produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Produce</button>

</EditForm>



@code {
    private AuthenticationState? _authenticationState;

    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private ProduceViewModel _produceViewModel = new();
    private Product? selectedProduct = null;


    protected override async Task OnInitializedAsync()
    {
        if (this.AuthenticationStateTask != null)
            _authenticationState = await this.AuthenticationStateTask;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender)
        {
            _jsRuntime.InvokeVoidAsync("PreventFormSubmit", "produceForm");
        }


    }
    private async Task Produce()
    {
        if (selectedProduct == null) return;


        if (_authenticationState != null
            && _authenticationState.User?.Identity?.Name != null)
        {
            string userName = _authenticationState.User.Identity.Name;
            await _produceProductUseCase.ExecuteAsync(
                        this._produceViewModel.ProductionNumber,
                        this.selectedProduct,
                        this._produceViewModel.QuantityToProduce,
                        userName);
        }




        this._produceViewModel = new ProduceViewModel();
        this.selectedProduct = null;
    }

    private async Task<List<ItemViewModel>> SearchProduct(string name)
    {
        var list = await _viewProductsByNameUseCase.ExecuteAsync(name);
        if (list != null && list.Count() > 0)
        {
            return list.Select(p => new ItemViewModel { Id = p.ProductId.ToString(), Name = p.ProductName }).ToList();
        }
        return new List<ItemViewModel>();



    }

    private async void OnItemSelected(ItemViewModel item)
    {
        if (item != null)
        {
            int itemId = Convert.ToInt32(item.Id);
            var product = await _viewProductByIdUseCase.ExecuteAsync(itemId);
            this.selectedProduct = product;
            this._produceViewModel.ProductId = itemId;
            this._produceViewModel.ProductPrice = product.Price;

        }
        else
        {

            this.selectedProduct = null;
            this._produceViewModel.ProductId = 0;
            this._produceViewModel.ProductPrice = 0;
        }
    }
}
